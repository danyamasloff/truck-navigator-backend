package ru.maslov.trucknavigator.config;
import ru.maslov.trucknavigator.entity.DrivingStatus;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.DependsOn;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import ru.maslov.trucknavigator.entity.*;
import ru.maslov.trucknavigator.repository.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ dev-–ø—Ä–æ—Ñ–∏–ª–µ.
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–æ–¥–∏—Ç–µ–ª–µ–π, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –≥—Ä—É–∑—ã –∏ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
@Component
@Profile("dev")
@RequiredArgsConstructor
@Slf4j
public class DataInitializer implements CommandLineRunner {

    private final UserRepository userRepository;
    private final DriverRepository driverRepository;
    private final VehicleRepository vehicleRepository;
    private final CargoRepository cargoRepository;
    private final RouteRepository routeRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) throws Exception {
        try {
            log.info("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TruckNavigator...");

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—ç—Ç–∞–ø–Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            if (userRepository.count() == 0) {
                initUsers();
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã: {}", userRepository.count());
            }

            if (driverRepository.count() == 0) {
                initDrivers();
                log.info("‚úÖ –í–æ–¥–∏—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã: {}", driverRepository.count());
            }

            if (vehicleRepository.count() == 0) {
                initVehicles();
                log.info("‚úÖ –¢–° —Å–æ–∑–¥–∞–Ω—ã: {}", vehicleRepository.count());
            }

            if (cargoRepository.count() == 0) {
                initCargos();
                log.info("‚úÖ –ì—Ä—É–∑—ã —Å–æ–∑–¥–∞–Ω—ã: {}", cargoRepository.count());
            }

            if (routeRepository.count() == 0) {
                initRoutes();
                log.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: {}", routeRepository.count());
            }

            log.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            logTestingInstructions();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage(), e);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
     */
    private void initUsers() {
        log.info("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");

        List<User> users = List.of(
            User.builder()
                .username("admin")
                .password(passwordEncoder.encode("admin123"))
                .email("admin@truck-navigator.ru")
                .firstName("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                .lastName("–°–∏—Å—Ç–µ–º—ã")
                .active(true)
                .roles(Set.of("ROLE_ADMIN"))
                .createdAt(LocalDateTime.now())
                .build(),

            User.builder()
                .username("dispatcher")
                .password(passwordEncoder.encode("disp123"))
                .email("dispatcher@truck-navigator.ru")
                .firstName("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä")
                .lastName("–î–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤")
                .active(true)
                .roles(Set.of("ROLE_DISPATCHER"))
                .createdAt(LocalDateTime.now())
                .build(),

            User.builder()
                .username("manager")
                .password(passwordEncoder.encode("manager123"))
                .email("manager@truck-navigator.ru")
                .firstName("–ï–ª–µ–Ω–∞")
                .lastName("–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤–∞")
                .active(true)
                .roles(Set.of("ROLE_MANAGER"))
                .createdAt(LocalDateTime.now())
                .build(),

            User.builder()
                .username("driver")
                .password(passwordEncoder.encode("driver123"))
                .email("driver@truck-navigator.ru")
                .firstName("–ò–≤–∞–Ω")
                .lastName("–í–æ–¥–∏—Ç–µ–ª–µ–≤")
                .active(true)
                .roles(Set.of("ROLE_DRIVER"))
                .createdAt(LocalDateTime.now())
                .build(),

            User.builder()
                .username("supervisor")
                .password(passwordEncoder.encode("super123"))
                .email("supervisor@truck-navigator.ru")
                .firstName("–ú–∏—Ö–∞–∏–ª")
                .lastName("–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤")
                .active(true)
                .roles(Set.of("ROLE_DISPATCHER", "ROLE_MANAGER"))
                .createdAt(LocalDateTime.now())
                .build()
        );

        userRepository.saveAll(users);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
     */
    private void initDrivers() {
        log.info("üöõ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π...");

        List<Driver> drivers = List.of(
            Driver.builder()
                .firstName("–ò–≤–∞–Ω")
                .lastName("–ü–µ—Ç—Ä–æ–≤")
                .middleName("–°–µ—Ä–≥–µ–µ–≤–∏—á")
                .birthDate(LocalDate.of(1985, 5, 15))
                .licenseNumber("7722334455")
                .licenseIssueDate(LocalDate.of(2010, 3, 20))
                .licenseExpiryDate(LocalDate.of(2030, 3, 20))
                .licenseCategories("B,C,CE")
                .phoneNumber("+7-900-123-45-67")
                .email("ivan.petrov@example.com")
                .drivingExperienceYears(15)
                .hasDangerousGoodsCertificate(true)
                .dangerousGoodsCertificateExpiry(LocalDate.of(2025, 6, 1))
                .hasInternationalTransportationPermit(true)
                .hasOversizedCargoPermit(true)
                .hasRefrigeratedCargoPermit(true)
                .medicalCertificateNumber("–ú–ö-12345")
                .medicalCertificateExpiryDate(LocalDate.of(2024, 12, 31))
                .currentDrivingStatus(DrivingStatus.AVAILABILITY)
                .currentStatusStartTime(LocalDateTime.now().minusHours(2))
                .dailyDrivingMinutesToday(0)
                .continuousDrivingMinutes(0)
                .weeklyDrivingMinutes(0)
                .avgFuelEfficiencyPercent(95)
                .avgDeliveryTimeEfficiencyPercent(98)
                .hourlyRate(new BigDecimal("800.00"))
                .perKilometerRate(new BigDecimal("15.00"))
                .rating(new BigDecimal("4.8"))
                .completedRoutesCount(245)
                .totalDistanceDrivenKm(new BigDecimal("125000"))
                .incidentsCount(0)
                .workScheduleType("5/2")
                .weeklyWorkHours(40)
                .lastRestDay(LocalDate.now().minusDays(1))
                .knownRegions(Set.of("77", "78", "47", "50"))
                .adrClasses(Set.of("1", "3", "8"))
                .build(),

            Driver.builder()
                .firstName("–ê–ª–µ–∫—Å–µ–π")
                .lastName("–°–∏–¥–æ—Ä–æ–≤")
                .middleName("–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á")
                .birthDate(LocalDate.of(1978, 11, 8))
                .licenseNumber("6611224433")
                .licenseIssueDate(LocalDate.of(2008, 7, 10))
                .licenseExpiryDate(LocalDate.of(2028, 7, 10))
                .licenseCategories("B,C,CE,D")
                .phoneNumber("+7-901-987-65-43")
                .email("alexey.sidorov@example.com")
                .drivingExperienceYears(22)
                .hasDangerousGoodsCertificate(true)
                .hasInternationalTransportationPermit(true)
                .hasOversizedCargoPermit(false)
                .hasRefrigeratedCargoPermit(true)
                .medicalCertificateNumber("–ú–ö-67890")
                .medicalCertificateExpiryDate(LocalDate.of(2024, 8, 15))
                .currentDrivingStatus(DrivingStatus.AVAILABILITY)
                .currentStatusStartTime(LocalDateTime.now().minusHours(1))
                .dailyDrivingMinutesToday(0)
                .continuousDrivingMinutes(0)
                .weeklyDrivingMinutes(0)
                .avgFuelEfficiencyPercent(92)
                .avgDeliveryTimeEfficiencyPercent(95)
                .hourlyRate(new BigDecimal("950.00"))
                .perKilometerRate(new BigDecimal("18.00"))
                .rating(new BigDecimal("4.9"))
                .completedRoutesCount(312)
                .totalDistanceDrivenKm(new BigDecimal("180000"))
                .incidentsCount(1)
                .workScheduleType("2/2")
                .weeklyWorkHours(48)
                .lastRestDay(LocalDate.now().minusDays(2))
                .knownRegions(Set.of("77", "78", "23", "39"))
                .adrClasses(Set.of("2", "3", "4.1"))
                .build(),

            Driver.builder()
                .firstName("–ú–∏—Ö–∞–∏–ª")
                .lastName("–ö—É–∑–Ω–µ—Ü–æ–≤")
                .middleName("–ê–Ω–¥—Ä–µ–µ–≤–∏—á")
                .birthDate(LocalDate.of(1990, 2, 22))
                .licenseNumber("5544332211")
                .licenseIssueDate(LocalDate.of(2015, 1, 12))
                .licenseExpiryDate(LocalDate.of(2035, 1, 12))
                .licenseCategories("B,C")
                .phoneNumber("+7-902-555-11-22")
                .email("mikhail.kuznetsov@example.com")
                .drivingExperienceYears(9)
                .hasDangerousGoodsCertificate(false)
                .hasInternationalTransportationPermit(false)
                .hasOversizedCargoPermit(false)
                .hasRefrigeratedCargoPermit(false)
                .medicalCertificateNumber("–ú–ö-11111")
                .medicalCertificateExpiryDate(LocalDate.of(2025, 3, 1))
                .currentDrivingStatus(DrivingStatus.AVAILABILITY)
                .currentStatusStartTime(LocalDateTime.now().minusMinutes(30))
                .dailyDrivingMinutesToday(0)
                .continuousDrivingMinutes(0)
                .weeklyDrivingMinutes(0)
                .avgFuelEfficiencyPercent(88)
                .avgDeliveryTimeEfficiencyPercent(90)
                .hourlyRate(new BigDecimal("650.00"))
                .perKilometerRate(new BigDecimal("12.00"))
                .rating(new BigDecimal("4.5"))
                .completedRoutesCount(89)
                .totalDistanceDrivenKm(new BigDecimal("45000"))
                .incidentsCount(0)
                .workScheduleType("5/2")
                .weeklyWorkHours(40)
                .lastRestDay(LocalDate.now().minusDays(1))
                .knownRegions(Set.of("77", "50", "33"))
                .adrClasses(Set.of())
                .build()
        );

        driverRepository.saveAll(drivers);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
     */
    private void initVehicles() {
        log.info("üöö –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤...");

        List<Vehicle> vehicles = List.of(
            Vehicle.builder()
                .registrationNumber("–ê123–í–°77")
                .manufacturer("–ö–ê–ú–ê–ó")
                .model("65116")
                .productionYear(2020)
                .heightCm(320)
                .widthCm(250)
                .lengthCm(850)
                .emptyWeightKg(10000)
                .maxLoadCapacityKg(15000)
                .grossWeightKg(25000)
                .engineType("DIESEL")
                .fuelCapacityLitres(350)
                .fuelConsumptionPer100km(new BigDecimal("32.5"))
                .emissionClass("EURO_5")
                .axisConfiguration("6X4")
                .axisCount(3)
                .hasRefrigerator(false)
                .hasDangerousGoodsPermission(true)
                .hasOversizedCargoPermission(false)
                .currentFuelLevelLitres(new BigDecimal("280"))
                .currentOdometerKm(new BigDecimal("85000"))
                .lastMaintenanceDate(LocalDate.of(2024, 1, 15))
                .nextMaintenanceDate(LocalDate.of(2024, 7, 15))
                .maintenanceIntervalKm(10000)
                .avgSpeedKmh(65.0)
                .avgIdleTimePercent(15.0)
                .actualFuelConsumptionPer100km(new BigDecimal("34.2"))
                .adrCertificateNumber("ADR-123456")
                .adrCertificateExpiryDate(LocalDate.of(2025, 12, 31))
                .avgMaintenanceCostPerKm(new BigDecimal("2.50"))
                .vehicleDepreciationPerKm(new BigDecimal("8.00"))
                .build(),

            Vehicle.builder()
                .registrationNumber("–í456–¢–†99")
                .manufacturer("–ú–ê–ù")
                .model("TGX 18.440")
                .productionYear(2019)
                .heightCm(400)
                .widthCm(255)
                .lengthCm(1650)
                .emptyWeightKg(12000)
                .maxLoadCapacityKg(18000)
                .grossWeightKg(40000)
                .engineType("DIESEL")
                .fuelCapacityLitres(400)
                .fuelConsumptionPer100km(new BigDecimal("28.0"))
                .emissionClass("EURO_6")
                .axisConfiguration("6X4")
                .axisCount(3)
                .hasRefrigerator(true)
                .hasDangerousGoodsPermission(false)
                .hasOversizedCargoPermission(false)
                .currentFuelLevelLitres(new BigDecimal("320"))
                .currentOdometerKm(new BigDecimal("120000"))
                .lastMaintenanceDate(LocalDate.of(2023, 12, 10))
                .nextMaintenanceDate(LocalDate.of(2024, 6, 10))
                .maintenanceIntervalKm(15000)
                .avgSpeedKmh(70.0)
                .avgIdleTimePercent(20.0)
                .actualFuelConsumptionPer100km(new BigDecimal("29.5"))
                .avgMaintenanceCostPerKm(new BigDecimal("3.20"))
                .vehicleDepreciationPerKm(new BigDecimal("12.00"))
                .build(),

            Vehicle.builder()
                .registrationNumber("–ï789–£–ö50")
                .manufacturer("Volvo")
                .model("FH16")
                .productionYear(2021)
                .heightCm(400)
                .widthCm(255)
                .lengthCm(1650)
                .emptyWeightKg(14000)
                .maxLoadCapacityKg(20000)
                .grossWeightKg(44000)
                .engineType("DIESEL")
                .fuelCapacityLitres(450)
                .fuelConsumptionPer100km(new BigDecimal("30.0"))
                .emissionClass("EURO_6")
                .axisConfiguration("8X4")
                .axisCount(4)
                .hasRefrigerator(false)
                .hasDangerousGoodsPermission(false)
                .hasOversizedCargoPermission(true)
                .currentFuelLevelLitres(new BigDecimal("380"))
                .currentOdometerKm(new BigDecimal("45000"))
                .lastMaintenanceDate(LocalDate.of(2024, 2, 1))
                .nextMaintenanceDate(LocalDate.of(2024, 8, 1))
                .maintenanceIntervalKm(20000)
                .avgSpeedKmh(68.0)
                .avgIdleTimePercent(12.0)
                .actualFuelConsumptionPer100km(new BigDecimal("31.2"))
                .avgMaintenanceCostPerKm(new BigDecimal("4.00"))
                .vehicleDepreciationPerKm(new BigDecimal("15.00"))
                .build()
        );

        vehicleRepository.saveAll(vehicles);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–∑—ã
     */
    private void initCargos() {
        log.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤...");

        List<Cargo> cargos = List.of(
            Cargo.builder()
                .name("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
                .description("–ö–∏—Ä–ø–∏—á —Å–∏–ª–∏–∫–∞—Ç–Ω—ã–π, –ø–æ–¥–¥–æ–Ω—ã")
                .weightKg(8500)
                .volumeCubicMeters(new BigDecimal("25.0"))
                .lengthCm(400)
                .widthCm(200)
                .heightCm(150)
                .cargoType(Cargo.CargoType.GENERAL)
                .isFragile(false)
                .isPerishable(false)
                .isDangerous(false)
                .requiresTemperatureControl(false)
                .requiresCustomsClearance(false)
                .declaredValue(new BigDecimal("450000"))
                .currency("RUB")
                .build(),

            Cargo.builder()
                .name("–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã")
                .description("–ú—è—Å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã")
                .weightKg(12000)
                .volumeCubicMeters(new BigDecimal("35.0"))
                .lengthCm(600)
                .widthCm(240)
                .heightCm(200)
                .cargoType(Cargo.CargoType.REFRIGERATED)
                .isFragile(false)
                .isPerishable(true)
                .isDangerous(false)
                .requiresTemperatureControl(true)
                .minTemperatureCelsius(-18)
                .maxTemperatureCelsius(-15)
                .requiresCustomsClearance(false)
                .declaredValue(new BigDecimal("1200000"))
                .currency("RUB")
                .build(),

            Cargo.builder()
                .name("–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞")
                .description("–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏, —Å—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã")
                .weightKg(6500)
                .volumeCubicMeters(new BigDecimal("40.0"))
                .lengthCm(800)
                .widthCm(240)
                .heightCm(220)
                .cargoType(Cargo.CargoType.FRAGILE)
                .isFragile(true)
                .isPerishable(false)
                .isDangerous(false)
                .requiresTemperatureControl(false)
                .requiresCustomsClearance(false)
                .declaredValue(new BigDecimal("850000"))
                .currency("RUB")
                .build(),

            Cargo.builder()
                .name("–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ç–∏–≤—ã")
                .description("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Ö–∏–º–∏—è –∫–ª–∞—Å—Å–∞ 8")
                .weightKg(5000)
                .volumeCubicMeters(new BigDecimal("15.0"))
                .lengthCm(300)
                .widthCm(200)
                .heightCm(180)
                .cargoType(Cargo.CargoType.DANGEROUS)
                .isFragile(false)
                .isPerishable(false)
                .isDangerous(true)
                .dangerousGoodsClass("8")
                .unNumber("UN1760")
                .requiresTemperatureControl(false)
                .requiresCustomsClearance(true)
                .declaredValue(new BigDecimal("320000"))
                .currency("RUB")
                .build(),

            Cargo.builder()
                .name("–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏")
                .description("–î–≤–∏–≥–∞—Ç–µ–ª–∏, –ö–ü–ü, –∑–∞–ø—á–∞—Å—Ç–∏")
                .weightKg(15000)
                .volumeCubicMeters(new BigDecimal("50.0"))
                .lengthCm(1000)
                .widthCm(240)
                .heightCm(250)
                .cargoType(Cargo.CargoType.HEAVY)
                .isFragile(false)
                .isPerishable(false)
                .isDangerous(false)
                .isOversized(true)
                .requiresTemperatureControl(false)
                .requiresCustomsClearance(false)
                .declaredValue(new BigDecimal("2500000"))
                .currency("RUB")
                .build()
        );

        cargoRepository.saveAll(cargos);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
     */
    private void initRoutes() {
        log.info("üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...");

        try {
            List<Route> routes = List.of(
                Route.builder()
                    .name("–ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
                    .startAddress("–ú–æ—Å–∫–≤–∞, –ú–ö–ê–î 47–∫–º")
                    .startLat(55.7558)
                    .startLon(37.6176)
                    .endAddress("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–ê–î 23–∫–º")
                    .endLat(59.9311)
                    .endLon(30.3609)
                    .distanceKm(new BigDecimal("635"))
                    .estimatedDurationMinutes(480)
                    .estimatedFuelConsumption(new BigDecimal("206.75"))
                    .estimatedFuelCost(new BigDecimal("11337"))
                    .estimatedTollCost(new BigDecimal("1200"))
                    .estimatedDriverCost(new BigDecimal("6400"))
                    .estimatedTotalCost(new BigDecimal("18937"))
                    .currency("RUB")
                    .overallRiskScore(new BigDecimal("32"))
                    .weatherRiskScore(new BigDecimal("25"))
                    .roadQualityRiskScore(new BigDecimal("15"))
                    .trafficRiskScore(new BigDecimal("40"))
                    .cargoRiskScore(new BigDecimal("20"))
                    .status(Route.RouteStatus.PLANNED)
                    .departureTime(LocalDateTime.now().plusHours(2))
                    .estimatedArrivalTime(LocalDateTime.now().plusHours(10))
                    .build(),

                Route.builder()
                    .name("–ú–æ—Å–∫–≤–∞ - –ö–∞–∑–∞–Ω—å")
                    .startAddress("–ú–æ—Å–∫–≤–∞, –©–µ–ª–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ")
                    .startLat(55.7558)
                    .startLon(37.6176)
                    .endAddress("–ö–∞–∑–∞–Ω—å, –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª")
                    .endLat(55.8304)
                    .endLon(49.0661)
                    .distanceKm(new BigDecimal("815"))
                    .estimatedDurationMinutes(600)
                    .estimatedFuelConsumption(new BigDecimal("264.88"))
                    .estimatedFuelCost(new BigDecimal("14518"))
                    .estimatedTollCost(new BigDecimal("800"))
                    .estimatedDriverCost(new BigDecimal("8000"))
                    .estimatedTotalCost(new BigDecimal("23318"))
                    .currency("RUB")
                    .overallRiskScore(new BigDecimal("28"))
                    .weatherRiskScore(new BigDecimal("30"))
                    .roadQualityRiskScore(new BigDecimal("20"))
                    .trafficRiskScore(new BigDecimal("25"))
                    .cargoRiskScore(new BigDecimal("35"))
                    .status(Route.RouteStatus.PLANNED)
                    .departureTime(LocalDateTime.now().plusDays(1))
                    .estimatedArrivalTime(LocalDateTime.now().plusDays(1).plusHours(10))
                    .build(),

                Route.builder()
                    .name("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ - –ù–æ–≤–≥–æ—Ä–æ–¥")
                    .startAddress("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–ê–î 12–∫–º")
                    .startLat(59.9311)
                    .startLon(30.3609)
                    .endAddress("–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –¢–¶ –†—É—Å—å")
                    .endLat(58.5219)
                    .endLon(31.2756)
                    .distanceKm(new BigDecimal("190"))
                    .estimatedDurationMinutes(150)
                    .estimatedFuelConsumption(new BigDecimal("61.75"))
                    .estimatedFuelCost(new BigDecimal("3386"))
                    .estimatedTollCost(new BigDecimal("0"))
                    .estimatedDriverCost(new BigDecimal("2000"))
                    .estimatedTotalCost(new BigDecimal("5386"))
                    .currency("RUB")
                    .overallRiskScore(new BigDecimal("21"))
                    .weatherRiskScore(new BigDecimal("20"))
                    .roadQualityRiskScore(new BigDecimal("25"))
                    .trafficRiskScore(new BigDecimal("15"))
                    .cargoRiskScore(new BigDecimal("25"))
                    .status(Route.RouteStatus.PLANNED)
                    .departureTime(LocalDateTime.now().plusDays(2))
                    .estimatedArrivalTime(LocalDateTime.now().plusDays(2).plusHours(3))
                    .build()
            );

            routeRepository.saveAll(routes);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: {}", e.getMessage());
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        }
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Swagger
     */
    private void logTestingInstructions() {
        log.info("üìñ ========== –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ ==========");
        log.info("üåê Swagger UI: http://localhost:8080/swagger-ui.html");
        log.info("üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:");
        log.info("   admin/admin123 - –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞");
        log.info("   dispatcher/disp123 - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏");
        log.info("   manager/manager123 - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞");
        log.info("   driver/driver123 - –≤–æ–¥–∏—Ç–µ–ª—å");
        log.info("   supervisor/super123 - —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä");
        log.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:");
        log.info("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {}", userRepository.count());
        log.info("   –í–æ–¥–∏—Ç–µ–ª–∏: {}", driverRepository.count());
        log.info("   –¢–°: {}", vehicleRepository.count());
        log.info("   –ì—Ä—É–∑—ã: {}", cargoRepository.count());
        log.info("   –ú–∞—Ä—à—Ä—É—Ç—ã: {}", routeRepository.count());
        log.info("üó∫Ô∏è  –û—Å–Ω–æ–≤–Ω—ã–µ endpoint'—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
        log.info("   POST /api/routes/calculate - —Ä–∞—Å—á–µ—Ç —Å –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π");
        log.info("   GET /api/routes/plan - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º");
        log.info("   GET /api/routes/plan-by-name - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º");
        log.info("   GET /api/drivers - —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π");
        log.info("   GET /api/vehicles - —Å–ø–∏—Å–æ–∫ –¢–°");
        log.info("   GET /api/cargos - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤");
        log.info("   GET /api/routes - —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤");
        log.info("üìã –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /api/routes/calculate:");
        log.info("   {{\"vehicleId\": 1, \"driverId\": 1, \"cargoId\": 1,");
        log.info("     \"startLat\": 55.7558, \"startLon\": 37.6176,");
        log.info("     \"endLat\": 59.9311, \"endLon\": 30.3609}}");
        log.info("==================================================");
    }
} 
